{% extends 'base.html.twig' %}

{% block navbar %}
    {% include 'navbar.html.twig' %}
{% endblock %}

{% block content %}
<div class="row mt-5">
    <div class="col">
        {{ form_start(form, {'attr' : {'autocomplete' : 'off'}}) }}
            <h1 class="text-center">Tâche planning</h1>
            <div class="mb-3">
                {{ form_label(form.name, 'Nom de la tâche', {'label_attr': { class: 'form-label' }}) }}
                {% if form_errors(form.name) %}            
                    <div class="form-error text-danger">
                        <span class="span_error bg-danger text-white">ERREUR</span>&nbsp;{{ form_errors(form.name) }}
                    </div>            
                {% endif %}
                {{ form_widget(form.name, {'attr': {'class': 'form-control'}}) }}    
            </div>  
            
            <div class="mb-3">                    
                {{ form_label(form.dependency, 'Dépend de la tâche', {'label_attr': { class: 'form-label' }}) }}
                {% if form_errors(form.dependency) %}                            
                    <div class="form-error text-danger">
                        <span class="span_error bg-danger text-white">ERREUR</span>&nbsp;{{ form_errors(form.dependency) }}
                    </div>     
                {% endif %}
                {{ form_widget(form.dependency, {'attr': {'class': 'form-control'}}) }}    
            </div>

            <div class="mb-3">                    
                {{ form_label(form.startDate, 'Début', {'label_attr': { class: 'form-label' }}) }}
                {% if form_errors(form.startDate) %}                            
                    <div class="form-error text-danger">
                        <span class="span_error bg-danger text-white">ERREUR</span>&nbsp;{{ form_errors(form.startDate) }}
                    </div>     
                {% endif %}
                {{ form_widget(form.startDate, {'attr': {'class': 'form-control'}}) }}    
            </div>    

            <div class="mb-3">                    
                {{ form_label(form.endDate, 'Fin', {'label_attr': { class: 'form-label' }}) }}
                {% if form_errors(form.endDate) %}                            
                    <div class="form-error text-danger">
                        <span class="span_error bg-danger text-white">ERREUR</span>&nbsp;{{ form_errors(form.endDate) }}
                    </div>     
                {% endif %}
                {{ form_widget(form.endDate, {'attr': {'class': 'form-control'}}) }}    
            </div>    

            <div class="mb-3">                    
                {{ form_label(form.percentDone, 'Pourcentage effecutée', {'label_attr': { class: 'form-label' }}) }} : <span id="val">{{percentDone}} %</span>
                {% if form_errors(form.percentDone) %}                            
                    <div class="form-error text-danger">
                        <span class="span_error bg-danger text-white">ERREUR</span>&nbsp;{{ form_errors(form.percentDone) }}
                    </div>     
                {% endif %}
                {{ form_widget(form.percentDone, {'attr': {'class': 'form-control'}}) }}    
            </div>   
            
            <div class="mb-3">                    
                {{ form_label(form.color, 'Pourcentage effecutée', {'label_attr': { class: 'form-label' }}) }}
                {% if form_errors(form.color) %}                            
                    <div class="form-error text-danger">
                        <span class="span_error bg-danger text-white">ERREUR</span>&nbsp;{{ form_errors(form.color) }}
                    </div>     
                {% endif %}
                {{ form_widget(form.color, {'attr': {'class': 'form-control'}}) }}    
            </div> 

            <div class="mb-3">
                {{ form_label(form.comment, 'Commentaire', {'label_attr': { class: 'form-label' }}) }}
                {% if form_errors(form.comment) %}            
                    <div class="form-error text-danger">
                        <span class="span_error bg-danger text-white">ERREUR</span>&nbsp;{{ form_errors(form.comment) }}
                    </div>            
                {% endif %}
                {{ form_widget(form.comment, {'attr': {'class': 'form-control'}}) }}    
            </div>     
         
            <div class="my-2">
                {% if (is_granted('ROLE_EXTERNAL') == false) %}
                    <button type="submit" class="btn btn-primary">Ok</button>     
                    {% if form.vars.value.id %}           
                        <a href="#" class="btn btn-danger ml-3" onClick="deletePlanning()">Supprimer</a>
                    {% endif %}
                {% endif %}
                <a href="{{path('project_edit', {id:projectId, onglet:'planning'})}}" class="btn btn-secondary ml-3">Retour</a>
            </div>            
        {{ form_end(form) }}
    </div>    
</div>
<script>
    const id = '{{id}}';

    document.getElementById("planning_name").focus()

    $('label.required').append('<span class="stars_required">*</span>')

    const div_error = '<div class="form-error form-error-small text-danger inline $input$"><span class="span_error bg-danger text-white">ERREUR</span>&nbsp;$error$</div>';

    $('form').on('submit', function() {
        let error;   

        $('.form-error').remove();        

        // valider date
        error = validDate($('#planning_startDate').val());
        if (error != '') {
            $('#planning_startDate').focus();            
            $('label[for="planning_startDate"]').append(div_error.replace('$input$', 'planning_startDate').replace('$error$', error))
            return false;
        }
       
        // valider date
        error = validDate($('#planning_endDate').val());
        if (error != '') {
            $('#planning_endDate').focus();
            $('label[for="planning_endDate"]').append(div_error.replace('$input$', 'planning_endDate').replace('$error$', error))
            return false;
        }
       
        // valider cohérence dates
        error = validDates($('#planning_startDate').val(), $('#planning_endDate').val());
        if (error != '') {
            $('#planning_endDate').focus();
            $('label[for="planning_endDate"]').append(div_error.replace('$input$', 'planning_endDate').replace('$error$', error))
            return false;
        }
        
        // commentaire
        /*
        if (id != '0' && $('#planning_comment').val().trim() == '') {
            $('#planning_comment').focus();
            $('label[for="planning_endDate"]').append(div_error.replace('$input$', 'planning_comment').replace('$error$', 'Veuillez encoder un commentaire'))            
            return false;
        }
        */

        return true;
    });

    $('input').on('change', function(ev) {
        let error, errors

        // id et valeur
        const id = $(this).attr('id');
        const val = $(this).val();

        /*
        console.log('id', id);
        console.log('val', val);  
        */      
    
        // initialisation, retirer l'erreur éventuelle sur la zone dont on modifie la valeur
        $('.'+id).remove()    

        // retirer l'erreur éventuelle rendue par le serveur (entity) lors d'un submit
        let element_html = $('label[for="' + id + '"]').next();        
        if (element_html.hasClass('form-error')) element_html.remove(); 

        if (id == 'project_work_company') {            
            $('.project_work_work').remove();
            element_html = $('label[for="project_work_work"]').next();        
            if (element_html.hasClass('form-error')) element_html.remove(); 
        }

        // traitement
        switch(id) {           
            case 'planning_startDate' :                 
                error = validDate(val);
                if (error == '') error = validDates(val, $('#planning_endDate').val());
                if (error != '') {
                    $('label[for="' + id+ '"]').append(div_error.replace('$input$',id).replace('$error$', error))
                }                
                break
            case 'planning_endDate' :                
                error = validDate(val);
                if (error == '') error = validDates($('#planning_startDate').val(), val);
                if (error != '') {
                    $('label[for="' + id+ '"]').append(div_error.replace('$input$',id).replace('$error$', error))
                }            
        }
    });

    function verifyError(errors, input, callback) {
        if (errors.errors.violations) {
            errors.errors.violations.forEach(function(obj) {
                if (obj['propertyPath'] == input) {
                    callback(obj['title']);
                    return ;
                } 
            })        
        }
    }

    function validForm(id, data) {        
        let url = '{{path("planning_valid_form", {projectId:projectId, taskId:id})}}';        
        $.ajax({
            url: url,
            async: true,
            data: $('form').serialize(),    // jquery construit le body pour la requête post
            type: 'POST',
            dataType: 'json',
            success: function (errors) { 
                //console.log(errors)                   
                verifyError(errors, data, function(error) {
                    $('label[for="' + id + '"]').append(div_error.replace('$input$', id).replace('$error$', error))
                });   
                return
            },
            error: function(jqXHR, textStatus, errorThrown ) {
                console.log(jqXHR, textStatus, errorThrown)
                alert('Erreur lors de la suppression')                    
            }
        })       
    }

    function validDate(date) {       
        date = parseInt(date.replaceAll('-',''));
        if (isNaN(date)) return 'La date n\'est pas valide';
        return '';
    }

    function validDates(start, end) {        
        start = parseInt(start.replaceAll('-',''));
        end = parseInt(end.replaceAll('-',''));                        
        if (end <= start) return 'La date de fin doit être postérieure à la date de début';
        return '';
    }
    
    $('#planning_percentDone').on('input', function () {
        const val = $(this).val()
        $('#val').html(val + ' %')
    })

    function deletePlanning() {
        if (confirm('Confirmer la suppression ?')) {                    
            $.ajax({
                url: '{{path("planning_delete",{id:projectId, taskId:id})}}',
                type: 'DELETE',
                dataType: 'text',
                success: function (result) {                    
                    document.location.href = '{{path("project_edit",{id:projectId, onglet:"planning"})}}&message=Tâche supprimée'                    
                },
                error: function(jqXHR, textStatus, errorThrown ) {
                    console.log(jqXHR, textStatus, errorThrown)
                    alert('Erreur lors de la suppression')                    
                }
            })            
        }        
    }
</script>
{% endblock %}
