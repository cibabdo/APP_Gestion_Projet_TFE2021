<div class="row mt-2">
    <div class="col text-center">
        {% for message in app.flashes('message') %}
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                {{ message }}              
            </div>
        {% endfor %}     
        {% if (is_granted('ROLE_EXTERNAL') == false) %} 
            <a href="{{path('planning_new', {id:projectId})}}" class="btn btn-primary btn-sm ml-5 add">Nouvelle tâche</a>
        {% endif %}
    </div>
</div>
<!-- Ajout d'un popup modal pour le commentaire en cas de modif sur tâche -->
<svg id="gantt" class="m-5"></svg>
<div id="showPopup" class="modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Commentaire sur la tâche</h5>          
        </div>
        <div class="modal-body">
          <textarea name="comment" id="comment" class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
        </div>
        <div class="modal-footer">
          <!--<button type="button" id="showPopup_close" class="btn btn-secondary" data-dismiss="modal">Fermer</button>-->
          <button type="button" id="showPopup_save" class="btn btn-primary">Enregistrer</button>
        </div>
      </div>
    </div>
</div>
<script>
    const is_external = {{is_external}};

    setTimeout(function() {
        const tab = document.getElementsByClassName('alert')    
        if (tab.length) tab[0].remove()
    },3000)         
    
    tasks = getTasks();         
    
    gantt = new Gantt("#gantt", tasks, { 
        is_readonly: is_external ? true : false,
        custom_popup_html: function(task) {            
            const start_date = String(task._start.getDate()).padStart(2, '0') + '/' + String(task._start.getMonth() + 1).padStart(2, '0') + '/' + task._start.getFullYear();
            const end_date = String(task._end.getDate()).padStart(2, '0') + '/' + String(task._end.getMonth() + 1).padStart(2, '0') + '/' + task._end.getFullYear();
            if (is_external) {
                return `
                <div class="details-container">
                <h3>${task.name}</h3>
                <p>Du ${start_date} au ${end_date}</p>
                <p>Effectué à ${task.progress} %</p>
                <p>Modifié le ${task.updatedAt} par ${task.username}</p>                
                <button class="btn btn-sm btn-info text-center" onclick="historique(${task.id});return false;">Historique</button>
                </div>
            `;
            }
            else {
                return `
                <div class="details-container">
                <h3>${task.name}</h3>
                <p>Du ${start_date} au ${end_date}</p>
                <p>Effectué à ${task.progress} %</p>
                <p>Modifié le ${task.updatedAt} par ${task.username}</p>
                <button class="btn btn-sm btn-blue text-center" onclick="editTask(${task.id});return false;">Editer</button>
                <button class="btn btn-sm btn-info text-center" onclick="historique(${task.id});return false;">Historique</button>
                </div>
            `;
            }           
        },
        on_date_change: function(task, start, end) {
            if (is_external) return;

            let dd, mm, yyyy;

            dd = String(start.getDate()).padStart(2, '0');
            mm = String(start.getMonth() + 1).padStart(2, '0');
            yyyy = start.getFullYear();
            start = yyyy + '-' + mm + '-' + dd;   

            dd = String(end.getDate()).padStart(2, '0');
            mm = String(end.getMonth() + 1).padStart(2, '0');
            yyyy = end.getFullYear();
            end = yyyy + '-' + mm + '-' + dd;   
          
            updateTaskDates(task.id, start, end);

            if (task.isParent) showComment(task.id);
        },

        on_progress_change: function(task, progress) {         
            if (is_external) return;
            updateTaskProgress(task.id, progress);
        }
       
    });

    gantt.change_view_mode('Week');       
    
    setTimeout(function() {
        scrollToToday();       
    }, 1000);

    /************************************/
   
    // réception des tâches en json du controleur
    function getTasks() {  
        let tasks;       
        $.ajax({
            async: false,
            url: "{{path('planning_list_json',{id:projectId})}}",
            type: 'GET',
            dataType: 'text',
            success: function (data) {                  
                tasks = JSON.parse(data); 
                tasks.forEach((element, index) => {
                    element.id =  element.id.toString();
                    tasks[index] = element;                   
                });              
            },
            error: function(jqXHR, textStatus, errorThrown ) {
                console.log(jqXHR, textStatus, errorThrown)
                alert('Erreur chargement des tâches')
            }
        })               
        return tasks;
    }

    function updateTaskDates(taskId, start, end) {
        if (is_external) return;
        let url = "{{path('planning_update_dates',{id:projectId, taskId:0})}}";
        url = url.replace('/0', '/'+taskId)
        $.ajax({            
            async: true,
            url: url,
            type: 'POST', 
            dataType: 'json',
            data: 'start=' + start + '&end='+end,     
            success: function (data) {        
                //console.log(data);
            },
            error: function(jqXHR, textStatus, errorThrown ) {
                console.log(jqXHR, textStatus, errorThrown)
                alert('Erreur chargement des tâches')
            }
        })    
    }

    function updateTaskProgress(taskId, progress) {
        if (is_external) return;
        let url = "{{path('planning_update_progress',{id:projectId, taskId:0})}}";
        url = url.replace('/0', '/'+taskId)
        $.ajax({
            async: true,
            url: url,
            type: 'POST', 
            data: 'progress=' + progress,
            success: function (data) {        
                //console.log(data);
            },
            error: function(jqXHR, textStatus, errorThrown ) {
                console.log(jqXHR, textStatus, errorThrown)
                alert('Erreur chargement des tâches')
            }
        })    
    }

    function addComment(taskId, comment) {       
        let url = "{{path('planning_add_comment',{id:projectId, taskId:0})}}";
        url = url.replace('/0', '/'+taskId)
        $.ajax({
            async: true,
            url: url,
            type: 'POST', 
            data: 'comment=' + comment,
            success: function (data) {        
                //console.log(data);
            },
            error: function(jqXHR, textStatus, errorThrown ) {
                console.log(jqXHR, textStatus, errorThrown)
                alert('Erreur chargement des tâches')
            }
        })    
    }

    function editTask(taskId) {
        if (is_external) return;
        let url = "{{path('planning_edit',{id:projectId, taskId:0})}}";
        url = url.replace('/0', '/'+ taskId)
        document.location.href = url;
    }  
    
    function historique(taskId) {
        if (is_external) return;
        let url = "{{path('planning_history',{id:projectId, taskId:0})}}";
        url = url.replace('/0', '/'+ taskId)
        document.location.href = url;
    }  

    function scrollToToday() {   
        let date = new Date();
        let dd = String(date.getDate()).padStart(2, '0');
        let mm = String(date.getMonth() + 1).padStart(2, '0');
        let date_w = 'date_' + dd + '-' + mm;
        //console.log(date_w);
        let obj = document.getElementById(date_w);
        if (obj === undefined || obj == null) return;	        
        $('#'+date_w).addClass('gantt-today');
        let x = obj.getAttribute('x');
        if (x === undefined || x == null) return;	        
        $('.gantt-container').scrollLeft(x);
    }

    let taskId = 0;
    function showComment(id) {        
        taskId = id;
        $('#showPopup').toggle();
        setTimeout(function() {
            $('#comment').focus();            
        }, 250);
    }

    $('body').on('click', '#showPopup_close', function(ev) {      
        $('#showPopup').toggle();
        return true;
    });

    $('body').on('click', '#showPopup_save', function(ev) {  
        if ($('#comment').val().trim() == '') {
            $('#comment').focus();
            return false;            
        }
        addComment(taskId, $('#comment').val());
        $('#comment').val('');
        $('#showPopup').toggle();
        return true;
    });
</script>
